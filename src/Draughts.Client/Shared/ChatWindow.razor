@using Microsoft.AspNetCore.SignalR.Client
@using Draughts.Client.Services
@inject ChatService _chat;
@inject IJSRuntime _js;

<div id="chat" class="card">
  <header class="card-header chat-header">
    <div class="card-header-title">Live Chat</div>
  </header>
  
  @if (_chat.Username is null)
  {
    <div class="card-content">
      <form @onsubmit="SaveUsername">
        <p class="control">
          <input @bind="EditedUsername" class="input" type="text" placeholder="Username...">
        </p>
      </form>
    </div>
    
    <footer class="card-footer">
      <button @onclick="SaveUsername" class="card-footer-item button is-outlined">Save</button>
    </footer>
  }
  else
  {
    <div class="card-content table-container chat-content">
      <table class="table is-fullwidth is-hoverable">
        <tbody id="chat-content">
        @foreach (var (author, content) in _chat.Messages)
        {
          <tr>
            <th>@author:</th>
            <td>@content</td>
          </tr>
        }
        </tbody>
      </table>
    </div>
    
    <footer class="card-footer">
      <form @onsubmit="SendMessage">
        <p class="card-footer-item control">
          <input @bind="Message" class="input" type="text" placeholder="Message...">
        </p>
      </form>
    </footer>
  }
</div>

@code {
  #region NotLoggedIn

  private string EditedUsername { get; set; }

  private void SaveUsername()
  {
    if (string.IsNullOrWhiteSpace(EditedUsername))
    {
      return;
    }

    _chat.Username = EditedUsername;
  }

  #endregion
  
  private string Message { get; set; }

  private async Task SendMessage()
  {
    if (string.IsNullOrWhiteSpace(Message))
    {
      return;
    }

    await _chat.SendMessage(Message);
    Message = "";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await _js.InvokeVoidAsync("initChatBox");
  }

  protected override async Task OnInitializedAsync()
  {
    await _chat.Initialize(StateHasChanged);
  }
}