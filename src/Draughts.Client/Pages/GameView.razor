@page "/games/{guid}"
@using Draughts.Shared.Models
@using Draughts.Shared.Models.Board
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navigationManager;
@inject HttpClient _http;
@implements IAsyncDisposable

<a href="/" class="button is-outlined">
    <span class="icon">
      <i class="fab fa-home"></i>
    </span>
    <span>Go Back</span>
</a>

@if (_game is null)
{
    <section class="section">
        <h1 class="title">Fetching game data...</h1>
        <h2 class="subtitle">@Guid</h2>
    </section>
}
else
{
    <section class="section">
        <h1 class="title">@_game.Name</h1>
        <h2 class="subtitle">@_game.Id @if(!_game.IsPublic) {<span>This is a private game! Do not lose the identifier!</span>}</h2>
    </section>

    <section class="section">
        <div class="level">
            <div class="level-item">
                @if (_board is null)
                {
                    <h2 class="title is-2">Failed to fetch playing board! Refresh the page or recreate game.</h2>
                }
                else
                {
                    for (var x = 0; x < Board.Size; x++)
                    {
                        <div class="board-row">
                            @for (var y = 0; y < Board.Size; y++)
                            {
                                var square = new BoardSquare(x, y);
                                var piece = _board.Pieces[x + y * Board.Size];
                                
                                var highlight = _selected is not null && _candidates.Any(m => m.Moves.Any(move => move.To == square));
                                var destination = highlight && _candidates.Any(m => m.To == square);
                                var canMove = highlight && _candidates.Any(m => m.Moves.Length > _moves.Count && m.Moves[_moves.Count].To == square);
                                var canGoBack = _moves.Any() && _moves.Last().From == square;
                                    
                                <div @onclick="async () => { if (destination) { if (canMove) { await MoveTo(square); } } else if (highlight) { if (canMove) { ChooseMove(square); } } else { Select(piece); }}" class="board-cell @(destination ? "destination-square" : highlight ? "highlight-square" : canGoBack ? "return-square" : "")">
                                    @if (piece is not null)
                                    {
                                        <div class="draught @(piece.Side == Side.White ? "white" : "") @(_selected == piece ? "selected" : "")">
                                            @if (piece.Promoted)
                                            {
                                                <span class="icon center-icon"><i class="fas fa-crown"></i></span>
                                            }
                                        </div>
                                    }
                                </div>
                            } 
                        </div>
                    }
                }
            </div>
        </div>
    </section>
}

@code {
    [Parameter]
    public string Guid { get; set; }
    
    private Game _game;
    private Board _board;
    private readonly List<AvailableMove> _candidates = new();
    private readonly List<AvailableMove> _excluded = new();
    private readonly List<Move> _moves = new();

    private BoardPiece _selected = null;
    
    private HubConnection _hub;
    
    private Uri Uri(string uri) => _navigationManager.ToAbsoluteUri(uri);

    private async Task MoveTo(BoardSquare square)
    {
        // TODO: This is probably too naive, might be a source of bugs, might want to do a gradual domain pruning
        var move = _candidates
            .Where(m => m.From == _selected.Pos)
            .FirstOrDefault(m => m.To == square);
        
        var result = await _http.PostAsJsonAsync(Uri($"/api/boards/{Guid}/moves"), move);
        Console.WriteLine(result);
    }

    private void UndoMove()
    {
        var lastMove = _moves.Last();
        var lastMoveIndex = _moves.Count - 1;

        var exclusions = _excluded
            .Where(m => lastMoveIndex == 0 || (m.From == _moves.First().From && m.Moves.Length >= lastMoveIndex))
            .ToList();
            
        _candidates.AddRange(exclusions);

        foreach (var exclusion in exclusions)
        {
            _excluded.Remove(exclusion);
        }
            
        _moves.RemoveAt(lastMoveIndex);
        _board.UndoMove(lastMove);

        StateHasChanged();
    }
    
    private void ChooseMove(BoardSquare square)
    {
        if (_moves.Any() && _moves.Last().From == square)
        {
            UndoMove();
            return;
        }

        var from = _selected.Pos;
        var to = square;

        var moveIndex = _moves.Count;

        var move = _candidates
            .Where(m => m.Moves.Length > moveIndex)
            .Select(m => m.Moves[moveIndex])
            .FirstOrDefault(m => m.From == from && m.To == to);

        if (move is not null)
        {
            _board.Move(move);
            _moves.Add(move);
            
            var exclusions = _candidates
                .Where(m => m.Moves.Length <= moveIndex || m.Moves[moveIndex].From != from || m.Moves[moveIndex].To != to)
                .ToList();
            
            _excluded.AddRange(exclusions);

            foreach (var exclusion in exclusions)
            {
                _candidates.Remove(exclusion);
            }
        }
        
        StateHasChanged();
    }

    private async Task PieceMoved(string identifier)
    {
        Console.WriteLine("Piece moved!");
        
        _board = await _http.GetFromJsonAsync<Board>(Uri($"/api/boards/{Guid}"));
        _candidates.Clear();
        _excluded.Clear();
        _moves.Clear();
        _candidates.AddRange(_board?.AvailableMoves ?? Array.Empty<AvailableMove>());
        _selected = null;
        StateHasChanged();
    }

    private void Select(BoardPiece piece)
    {
        var movesMade = _moves.Count;

        for (var i = 0; i < movesMade; i++)
        {
            UndoMove();
        }
        
        _candidates.Clear();
        _excluded.Clear();
        _moves.Clear();
        _candidates.AddRange(_board?.AvailableMoves ?? Array.Empty<AvailableMove>());
        
        if (piece is not null && _selected != piece)
        {
            _selected = piece;
            
            var irrelevant = _candidates.Where(x => x.From != _selected.Pos).ToList();

            foreach (var irrelevantMove in irrelevant)
            {
                _candidates.Remove(irrelevantMove);
            }
            
            _excluded.AddRange(irrelevant);
            
            StateHasChanged();
            return;
        }
        
        _selected = null;
        
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _game = await _http.GetFromJsonAsync<Game>(Uri($"/api/games/{Guid}"));
        _board = await _http.GetFromJsonAsync<Board>(Uri($"/api/boards/{Guid}"));
        _candidates.Clear();
        _excluded.Clear();
        _moves.Clear();
        _candidates.AddRange(_board?.AvailableMoves ?? Array.Empty<AvailableMove>());
        
        Console.WriteLine(_candidates);
        
        _hub = new HubConnectionBuilder()
            .WithUrl(Uri("/signalr/games"))
            .Build();
    
        _hub.On<string>("PieceMoved", PieceMoved);

        await _hub.StartAsync();
        await _hub.SendAsync("WatchBoard", Guid);
    }

    public async ValueTask DisposeAsync()
    {
        await _hub.DisposeAsync();
    }
}