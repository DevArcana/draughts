@page "/games/{guid}"
@using Draughts.Shared.Models
@using Draughts.Shared.Models.Board
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navigationManager;
@inject HttpClient _http;
@implements IAsyncDisposable

<a href="/" class="button is-outlined">
    <span class="icon">
      <i class="fab fa-home"></i>
    </span>
    <span>Go Back</span>
</a>

@if (_game is null)
{
    <section class="section">
        <h1 class="title">Fetching game data...</h1>
        <h2 class="subtitle">@Guid</h2>
    </section>
}
else
{
    <section class="section">
        <h1 class="title">@_game.Name</h1>
        <h2 class="subtitle">@_game.Id @if(!_game.IsPublic) {<span>This is a private game! Do not lose the identifier!</span>}</h2>
    </section>

    <section class="section">
        <div class="level">
            <div class="level-item">
                @if (_board is null)
                {
                    <h2 class="title is-2">Failed to fetch playing board! Refresh the page or recreate game.</h2>
                }
                else
                {
                    for (var x = 0; x < Board.Size; x++)
                    {
                        <div class="board-row">
                            @for (var y = 0; y < Board.Size; y++)
                            {
                                var square = new BoardSquare(x, y);
                                var piece = _board.Pieces[x + y * Board.Size];

                                var highlight = _selected is not null && _board.AvailableMoves.Any(x => x.From == _selected.Pos && x.Moves.Any(m => m.To == square));
                                
                                <div @onclick="() => { if (highlight) { MoveTo(square); } else { Select(piece); }}" class="board-cell @(highlight ? "highlight-square" : "")">
                                    @if (piece is not null)
                                    {
                                        <div class="draught @(piece.Side == Side.White ? "white" : "") @(_selected == piece ? "selected" : "")">
                                            @if (piece.Promoted)
                                            {
                                                <span class="icon center-icon"><i class="fas fa-crown"></i></span>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </section>
}

@code {
    [Parameter]
    public string Guid { get; set; }
    
    private Game _game;
    private Board _board;

    private BoardPiece _selected = null;
    
    private HubConnection _hub;
    
    private Uri Uri(string uri) => _navigationManager.ToAbsoluteUri(uri);

    private async Task MoveTo(BoardSquare square)
    {
        // TODO: This is probably too naive, might be a source of bugs, might want to do a gradual domain pruning
        var move = _board.AvailableMoves
            .Where(m => m.From == _selected.Pos)
            .FirstOrDefault(m => m.To == square);
        
        var result = await _http.PostAsJsonAsync(Uri($"/api/boards/{Guid}/moves"), move);
        Console.WriteLine(result);
    }

    private async Task PieceMoved(Move move)
    {
        Console.WriteLine("Piece moved!");
        
        _board = await _http.GetFromJsonAsync<Board>(Uri($"/api/boards/{Guid}"));
        _selected = null;
        StateHasChanged();
    }

    private void Select(BoardPiece piece)
    {
        if (piece is not null && _selected != piece)
        {
            _selected = piece;
            return;
        }
        
        _selected = null;
    }

    protected override async Task OnInitializedAsync()
    {
        _game = await _http.GetFromJsonAsync<Game>(Uri($"/api/games/{Guid}"));
        _board = await _http.GetFromJsonAsync<Board>(Uri($"/api/boards/{Guid}"));
        
        _hub = new HubConnectionBuilder()
            .WithUrl(Uri("/signalr/games"))
            .Build();
    
        _hub.On<Move>("PieceMoved", PieceMoved);

        await _hub.StartAsync();
        await _hub.SendAsync("WatchBoard", Guid);
    }

    public async ValueTask DisposeAsync()
    {
        await _hub.DisposeAsync();
    }

}