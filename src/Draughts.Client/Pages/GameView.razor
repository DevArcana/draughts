@page "/games/{guid}"
@using Draughts.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navigationManager;
@inject HttpClient _http;
@implements IAsyncDisposable

<a href="/" class="button is-outlined">
    <span class="icon">
      <i class="fab fa-home"></i>
    </span>
    <span>Go Back</span>
</a>

@if (_game is null)
{
    <section class="section">
        <h1 class="title">Fetching game data...</h1>
        <h2 class="subtitle">@Guid</h2>
    </section>
}
else
{
    <section class="section">
        <h1 class="title">@_game.Name</h1>
        <h2 class="subtitle">@_game.Id @if(!_game.IsPublic) {<span>This is a private game! Do not lose the identifier!</span>}</h2>
    </section>

    <section class="section">
        <div class="level">
            <div class="level-item">
                @if (_board is null)
                {
                    <h2 class="title is-2">Failed to fetch playing board! Refresh the page or recreate game.</h2>
                }
                else
                {
                    for (var x = 0; x < Board.Size; x++)
                    {
                        <div class="board-row">
                            @for (var y = 0; y < Board.Size; y++)
                            {
                                var sx = x;
                                var sy = y;
                                var piece = _board.Pieces[sx + sy * Board.Size];
                                <div @onclick="() => { if (_selected is not null && (_selected.Pos.X != sx || _selected.Pos.Y != sy)) { _selected = null; } }" class="board-cell">
                                    @if (piece is not null)
                                    {
                                        <div @onclick="() => { _selected = piece; }" class="draught @(piece.Side == Side.White ? "white" : "") @(_selected == piece ? "selected" : "")"></div>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </section>
}

@code {
    [Parameter]
    public string Guid { get; set; }
    
    private Game _game;
    private Board _board;

    private BoardPiece _selected = null;
    
    private HubConnection _hub;
    
    private Uri Uri(string uri) => _navigationManager.ToAbsoluteUri(uri);

    protected override async Task OnInitializedAsync()
    {
        _game = await _http.GetFromJsonAsync<Game>(Uri($"/api/games/{Guid}"));
        _board = await _http.GetFromJsonAsync<Board>(Uri($"/api/boards/{Guid}"));
        
        _hub = new HubConnectionBuilder()
            .WithUrl(Uri("/signalr/games"))
            .Build();
    
        // _hub.On<Guid, string>("GameCreated", GameCreated);
        // _hub.On<Guid>("GameDeleted", GameDeleted);

        await _hub.StartAsync();
        await _hub.SendAsync("WatchBoard", Guid);
    }

    public async ValueTask DisposeAsync()
    {
        await _hub.DisposeAsync();
    }

}